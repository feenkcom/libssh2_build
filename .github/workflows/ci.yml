name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
        - master
        - akg
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build Unixes
    runs-on: ${{ matrix.variant.os }}
    strategy:
      matrix:
        variant:
          #- os: ubuntu-18.04
            #platform: linux
          - os: macos-latest
            platform: mac

    steps:
    - name: Install dependencies
      if: matrix.variant.os == 'macos-latest'
      run: brew install pkg-config

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Retrieve libssh2 source
    - name: Retrieve openssh2
      run: git clone https://github.com/libssh2/libssh2.git -b libssh2-1.9.0

    - name: Retrieve openssl libraries (ubuntu)
      if: matrix.variant.platform == 'linux'
      run: |
        wget https://github.com/feenkcom/libssl_build/releases/download/v1.1.1g-ubuntu-18.04/libssl-dev-ubuntu-18.04.zip
        unzip libssl-dev-ubuntu-18.04.zip

    - name: Retrieve openssl libraries (mac)
      if: matrix.variant.platform == 'mac'
      run: |
        wget https://github.com/feenkcom/libssl_build/releases/download/v1.1.1g-macos-latest/libssl-dev-macos-latest.zip
        unzip libssl-dev-macos-latest.zip

    - name: Set pkg path
      run: echo ::set-env name=PKG_CONFIG_PATH::$(echo "${GITHUB_WORKSPACE}/openssl-1.1.1g/release/lib/pkgconfig")

    - name: Check pkg path
      run: |
        echo "PKG_CONFIG_PATH=${PKG_CONFIG_PATH}"
        find openssl-1.1.1g
        pkg-config --modversion openssl
        pkg-config --libs openssl

    - name: Set OPENSSL env vars
      run: |
        echo ::set-env name=OPENSSL_ROOT_DIR::$(echo "${GITHUB_WORKSPACE}/openssl-1.1.1g/release")
        echo ::set-env name=OPENSSL_LIB_DIR::$(echo "${GITHUB_WORKSPACE}/openssl-1.1.1g/release/lib")
        echo ::set-env name=OPENSSL_INCLUDE_DIR::$(echo "${GITHUB_WORKSPACE}/openssl-1.1.1g/release/include")
        echo ::set-env name=OPENSSL_DIR::$(echo "${GITHUB_WORKSPACE}/openssl-1.1.1g/release")

    - name: Configure
      run: |
        cd libssh2
        mkdir build
        cd build
        echo "OPENSSL_ROOT_DIR=${OPENSSL_ROOT_DIR}"
        echo "OPENSSL_LIB_DIR=${OPENSSL_LIB_DIR}"
        echo "OPENSSL_DIR=${OPENSSL_DIR}"
        cmake -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=../libssh2 ..

    - name: Compile
      run: |
        cd libssh2/build
        cmake --build .

    - name: Install
      run: |
        cd libssh2/build
        cmake --install .

    - name: Archive for release
      run: |
        cd libssh2
        zip -r ${GITHUB_WORKSPACE}/libssh2-dev-${{ matrix.variant.platform }}.zip libssh2
        cd ..
        mkdir artifacts
        cp libssh2/libssh2/lib/libssh2.* artifacts/
        zip -rj libssh2-${{ matrix.variant.platform }}.zip artifacts

    - name: Updload library
      uses: actions/upload-artifact@v2
      with:
        name: libssh2-${{ matrix.variant.platform }}
        path: artifacts

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v.1.9.0-${{ matrix.variant.platform }}
        release_name: v1.9.0-${{ matrix.variant.platform }}
        body: |
          libssh2 library for Pharo VM
        draft: true
        prerelease: true

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./libssh2-${{ matrix.variant.platform }}.zip
        asset_name: libssh2-${{ matrix.variant.platform }}.zip
        asset_content_type: application/zip

    - name: Upload -dev Release Asset
      id: upload-dev-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./libssh2-dev-${{ matrix.variant.platform }}.zip
        asset_name: libssh2-dev-${{ matrix.variant.platform }}.zip
        asset_content_type: application/zip

