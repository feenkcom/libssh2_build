name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
        - master
        - akg
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build Unixes
    runs-on: ${{ matrix.variant.os }}
    strategy:
      matrix:
        variant:
          - os: ubuntu-18.04
            platform: linux
          - os: macos-latest
            platform: mac
    env:
      MACOSX_DEPLOYMENT_TARGET: "10.9"
    steps:
    - name: Install dependencies
      if: matrix.variant.os == 'macos-latest'
      run: brew install pkg-config

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Set Up macOS
      if: runner.os == 'macOS'
      run: echo "GT_BUILD_SYSROOT=$(xcode-select -p)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX${MACOSX_DEPLOYMENT_TARGET}.sdk" >> $GITHUB_ENV
    - name: Install macOS SDK
      if: runner.os == 'macOS'
      run: |
        curl -L -O https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX${MACOSX_DEPLOYMENT_TARGET}.sdk.tar.xz
        tar -xf MacOSX${MACOSX_DEPLOYMENT_TARGET}.sdk.tar.xz -C "$(dirname "$GT_BUILD_SYSROOT")"
        # set minimum sdk version to our target
        plutil -replace MinimumSDKVersion -string ${MACOSX_DEPLOYMENT_TARGET} $(xcode-select -p)/Platforms/MacOSX.platform/Info.plist
        plutil -replace DTSDKName -string macosx${MACOSX_DEPLOYMENT_TARGET}internal $(xcode-select -p)/Platforms/MacOSX.platform/Info.plist

    # Retrieve libssh2 source
    - name: Retrieve openssh2
      run: git clone https://github.com/libssh2/libssh2.git -b libssh2-1.9.0

    - name: Retrieve openssl libraries (ubuntu)
      if: matrix.variant.platform == 'linux'
      run: |
        wget https://github.com/feenkcom/libssl_build/releases/download/v1.1.1g-linux/libssl-dev-linux.zip
        unzip libssl-dev-linux.zip

    - name: Retrieve openssl libraries (mac)
      if: matrix.variant.platform == 'mac'
      run: |
        wget https://github.com/feenkcom/libssl_build/releases/download/v1.1.1g-mac/libssl-dev-mac.zip
        unzip libssl-dev-mac.zip

    - name: Set pkg path
      run: echo "PKG_CONFIG_PATH=${GITHUB_WORKSPACE}/openssl-1.1.1g/lib/pkgconfig" >> $GITHUB_ENV

    - name: Check pkg path
      run: |
        echo "PKG_CONFIG_PATH=${PKG_CONFIG_PATH}"
        pkg-config --modversion openssl
        pkg-config --libs openssl

    - name: Set OPENSSL env vars
      run: |
        echo "OPENSSL_ROOT_DIR=${GITHUB_WORKSPACE}/openssl-1.1.1g" >> $GITHUB_ENV
        echo "OPENSSL_LIB_DIR=${GITHUB_WORKSPACE}/openssl-1.1.1g/lib" >> $GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=${GITHUB_WORKSPACE}/openssl-1.1.1g/include" >> $GITHUB_ENV
        echo "OPENSSL_DIR=${GITHUB_WORKSPACE}/openssl-1.1.1g" >> $GITHUB_ENV

    - name: Configure
      run: |
        cd libssh2
        mkdir build
        cd build
        echo "OPENSSL_ROOT_DIR=${OPENSSL_ROOT_DIR}"
        echo "OPENSSL_LIB_DIR=${OPENSSL_LIB_DIR}"
        echo "OPENSSL_DIR=${OPENSSL_DIR}"
        cmake -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=../libssh2 ..

    - name: Compile
      run: |
        cd libssh2/build
        cmake --build .

    - name: Install
      run: |
        cd libssh2/build
        cmake --install .

    - name: Mac id correction
      if: matrix.variant.platform == 'mac'
      run: |
        cd libssh2/build/src
        for i in libssh2.*dylib*; do install_name_tool -id @executable_path/Plugins/$i $i; done
        otool -L libssh2.*dylib*

    - name: Archive for release
      run: |
        cd libssh2
        zip -ry ${GITHUB_WORKSPACE}/libssh2-dev-${{ matrix.variant.platform }}.zip libssh2
        cd ..
        mkdir artifacts
        cp libssh2/libssh2/lib/libssh2.* artifacts/
        zip -rjy libssh2-${{ matrix.variant.platform }}.zip artifacts

    - name: Updload library
      uses: actions/upload-artifact@v2
      with:
        name: libssh2-${{ matrix.variant.platform }}
        path: artifacts
        
    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true # set to false if you do not want to allow updates on existing releases
        draft: false
        prerelease: true
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: './libssh2-${{ matrix.variant.platform }}.zip,./libssh2-dev-${{ matrix.variant.platform }}.zip'
        tag: v.1.9.0-${{ matrix.variant.platform }}
        name: v.1.9.0-${{ matrix.variant.platform }}
